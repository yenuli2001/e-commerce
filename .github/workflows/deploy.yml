name: CI/CD Pipeline for Product Catalog

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonar-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm ci
          
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v2.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=yenuli2001_e-commerce
            -Dsonar.organization=yenuli2001
            -Dsonar.sources=.
            -Dsonar.exclusions=node_modules/**,**/test/**,**/tests/**,coverage/**
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.analyst.mode=ci_only
        continue-on-error: true  # Allow pipeline to continue even if SonarCloud fails

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: sonar-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        continue-on-error: true  # Continue even if tests fail for demonstration

  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: productcatalogacr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            productcatalogacr.azurecr.io/product-catalog-api:latest
            productcatalogacr.azurecr.io/product-catalog-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify-deployment:
    name: Deploy to Azure Container App
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    if: success()
    steps:
      - name: Login to Azure using Access Token
        run: |
          az login --access-token ${{ secrets.AZURE_ACCESS_TOKEN }}

      - name: Deploy to Azure Container App
        run: |
          az containerapp update \
            --name product-catalog-api \
            --resource-group ProductCatalogResourceGroup \
            --image productcatalogacr.azurecr.io/product-catalog-api:${{ github.sha }}
